q
name.send
name
q
@pattern.to_s
match_data = @pattern.match("/users/42")
req.path
req.params
regex = Regexp.new '/users/(?<id>\d+)'
@pattern
q
instance_eval(&proc)
Router.instance_eval(&proc)
Route.instance_eval(&proc)
route.instance_eval(&proc)
proc
instance_eval(&proc)
instance_eval(proc)
proc.instance_eval
instance_eval
q
Regexp.new("^/users").match("/users/asdc")
Regexp.new("^/users")
Regexp.new("^/users$")
@pattern.match("/users/asdc")
@pattern.match(req.path).to_s
@pattern.match(req.path)
@pattern
req.path
get
proc.call
p proc
proc.count
proc.each
self.methods.include?(:get)
self.methods
exit
@controller_class
exit
proc.inspect
proc.methods
proc.call
proc
q
@http_method.upcase == req.request_method.to_sym
      && @http_method.upcase == req.request_method.to_sym
!!@pattern.match(req.path)
req.request_method.to_sym
@http_method.upcase
@http_method
req.request_method
@request.request_method
req.http_method
req.method
@request.get
@pattern.match(req.path) && @http_method
@pattern.match(req.path)
req.path
req
q
self.class.name.tableize.singularize
self.class.name.tableize
self.class.name
q
@path
q
@path
q
@res.path
res.path
@req.path
q
exit
res.cookie
res.cookies
res.set_cookie('_rails_lite_app', @cookie.to_json)
@cookie.to_json
@cookie
q
exit
req.cookies['_rails_lite_a']
JSON.parse(req.cookies['_rails_lite_a'])
JSON.parse(req.cookies['_rails_lite_app'])
JSON.parse(_)
req.cookies['_rails_lite_app']
q
exit
file_path
q
exit
self.class.name.tableize.singulariz
self.class.name.
self.class.name.tableize
self.class.name
self.class.tableize
self.class
self.name
q
exit
@res.path
@params
 @req.path
file_path
exit
@already_built_response.nil?
@already_built_response
q
@req
q
q\
@req
q
req.path
